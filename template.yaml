AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  BucketName:
    Type: String
  S3Version:
    Type: String

Resources:
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Code:
        S3Bucket: !Ref BucketName
        S3Key: function.zip
        S3ObjectVersion: !Ref S3Version
      Handler: function/index.handler
      Role: !GetAtt ExecutionRole.Arn

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ApiGwPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Function.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/${Stage}"

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ExampleAPI
      ProtocolType: HTTP

  Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':apigateway:'
          - !Ref AWS::Region
          - ':lambda:path/2015-03-21/functions/'
          - !GetAtt Function.Arn
          - /invocations
      PayloadFormatVersion: '2.0'
  
  Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: $default
      Target: !Join
        - '/'
        - - integrations
          - !Ref Integration

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      StageName: $default
      AutoDeploy: true
